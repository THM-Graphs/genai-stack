services:

  regestaimperii-loader:
    extends:
      file: template.yml
      service: loader
    # build:
    #   context: .
    #   dockerfile: loader.Dockerfile
    volumes:
      - $PWD/embedding_model:/embedding_model
    environment: &regestaimperii_env
      NEO4J_DATABASE: regestaimperii
      PREPARATION_QUERY: |
        MATCH (r:Regesta) 
        CALL {
          WITH r
          SET r.concatText = apoc.text.join([x in [r.archivalHistory, r.commentary, r.summary] where x is not null], ' ')
        } IN CONCURRENT TRANSACTIONS
      LABEL: Regesta
      PROPERTY_IDENTIFIER: uid
      PROPERTY_TEXT: concatText
      PROPERTY_EMBEDDING: embedding
      PROMPT_CONTEXT: den Regesta Imperii
      RETRIEVAL_QUERY: |
        MATCH (node)
        WITH node, score, 
          COLLECT { MATCH (node)-[:EXTERNAL_SOURCE|REFERENCES]->(ref) RETURN apoc.text.join([x IN [ref.shortTitle, ref.url] WHERE x IS NOT NULL], ' ') } AS refs, 
          COLLECT { MATCH (node)-[:PLACE_OF_ISSUE]->(p:Place) RETURN apoc.text.join([x IN [p.latLong, p.normalizedGerman, p.wikidataId] WHERE x IS NOT NULL], ' ') } AS places 
        RETURN '### Orte:\n' + apoc.text.join(places, '\n') +'### Referenzen:\n' + apoc.text.join(refs, '\n') + '\n###Text: ' + node.concatText AS text,
            score,
            { source:  coalesce(node.url, 'n/a') } AS metadata  
        ORDER BY score ASC

    ports:
      - 8082:8080
      - 8602:8502

  regestaimperii-bot:
    extends:
      file: template.yml
      service: bot
    # build:
    #   context: .
    #   dockerfile: bot.Dockerfile
    volumes:
      - $PWD/embedding_model:/embedding_model
    environment:
      *regestaimperii_env
    ports:
      - 8601:8501

  # pdf_bot:
  #   build:
  #     context: .
  #     dockerfile: pdf_bot.Dockerfile
  #   environment:
  #     - NEO4J_URI=${NEO4J_URI-neo4j://database:7687}
  #     - NEO4J_PASSWORD=${NEO4J_PASSWORD-password}
  #     - NEO4J_USERNAME=${NEO4J_USERNAME-neo4j}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY-}
  #     - GOOGLE_API_KEY=${GOOGLE_API_KEY-}
  #     - OLLAMA_BASE_URL=${OLLAMA_BASE_URL-http://host.docker.internal:11434}
  #     - LLM=${LLM-llama2}
  #     - EMBEDDING_MODEL=${EMBEDDING_MODEL-sentence_transformer}
  #     - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT-"https://api.smith.langchain.com"}
  #     - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2-false}
  #     - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}
  #     - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  #     - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
  #   networks:
  #     - net
  #   depends_on:
  #     database:
  #       condition: service_healthy
  #     pull-model:
  #       condition: service_completed_successfully
  #   x-develop:
  #     watch:
  #       - action: rebuild
  #         path: .
  #         ignore:
  #           - loader.py
  #           - bot.py
  #           - api.py
  #           - front-end/
  #   ports:
  #     - 8503:8503

  regestaimperii-api:
    extends:
      file: template.yml
      service: api
    environment:
      *regestaimperii_env
    volumes:
      - $PWD/embedding_model:/embedding_model
    ports:
      - 8604:8504

  # front-end:
  #   build:
  #     context: .
  #     dockerfile: front-end.Dockerfile
  #   x-develop:
  #     watch:
  #       - action: sync
  #         path: ./front-end
  #         target: /app
  #         ignore:
  #           - ./front-end/node_modules/
  #       - action: rebuild
  #         path: ./front-end/package.json
  #   depends_on:
  #     api:
  #       condition: service_healthy
  #   networks:
  #     - net
  #   ports:
  #     - 8505:8505

